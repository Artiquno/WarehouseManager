openapi: 3.0.1
info:
  title: Warehouse Management
  description: Management of Warehouse
  version: 0.0.1-SNAPSHOT
servers:
  - url: /v2
paths:
  /users:
    summary: API for user management
    description: >
      Really, that's it. It's just for managing users, nothing fancy
    get:
      summary: Get all users
      operationId: getAllUsers
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      summary: Create a user
      operationId: createUser
      requestBody:
        description: The user credentials and roles
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentialsDTO'
      responses:
        200:
          description: Great success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      summary: Update a user
      operationId: updateUser
      requestBody:
        description: The user's information to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        200:
          description: User was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        404:
          description: The user with the given id doesn't exist

  /users/{id}:
    get:
      summary: Get a user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successfully returned the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        404:
          description: User with the given id doesn't exist
    delete:
      summary: Delete a user
      operationId: removeUser
      parameters:
        - name: id
          in: path
          description: The id of the user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The user was deleted. Or it didn't exist in the first place

  /users/create-default:
    post:
      summary: Create default user
      description: Creates a default user if no user exists in the database
      operationId: createDefaultUser
      responses:
        200:
          description: Default user was created
          content:
            application/json:
              schema:
                type: string
        403:
          description: A user already exists in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trucks:
    get:
      summary: Get all trucks
      operationId: getAllTrucks
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TruckDTO'
components:
  schemas:
    TruckDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        chassis:
          type: integer
          format: int64
        licensePlate:
          type: string
          example: "IH8SMR"

    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
    UserCredentialsDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
